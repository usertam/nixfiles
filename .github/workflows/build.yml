name: "Build Image"
on:
  workflow_dispatch:
  push:
  schedule:
  - cron: '0 0 * * MON'
permissions:
  contents: write
jobs:
  build-linux:
    name: Build Linux
    strategy:
      matrix:
        config: [generic.installer, generic.azure, generic.docker]
        system: [x86_64-linux, aarch64-linux]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        ref: ${{ github.event_name == 'schedule' && 'staging' || github.ref }}
    - uses: DeterminateSystems/nix-installer-action@main
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Install emulation support
      if: matrix.system != 'x86_64-linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y binfmt-support qemu-user-static
        echo 'extra-platforms = aarch64-linux' | sudo tee -a /etc/nix/nix.conf
        sudo systemctl restart nix-daemon
    - name: Build ${{matrix.system}}.${{matrix.config}}.toplevel
      run: |
        nix build -L .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.toplevel
    - name: Build ${{matrix.system}}.${{matrix.config}}.release
      if: contains(matrix.config, 'generic')
      run: |
        nix build -L .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.release
        find -L result -name '*.xz' -exec cp -a {} . \;
        echo "artifact=$(ls *.xz | tee /dev/stderr)" >> "$GITHUB_ENV"
    - uses: actions/upload-artifact@main
      if: env.artifact != ''
      with:
        name: ${{env.artifact}}
        path: ${{env.artifact}}

  build-darwin:
    name: Build Darwin
    runs-on: macos-15
    steps:
    - uses: actions/checkout@main
      with:
        ref: ${{ github.event_name == 'schedule' && 'staging' || github.ref }}
    - uses: DeterminateSystems/nix-installer-action@main
      with:
        mac-case-sensitive: true
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Switch to darwin-runner
      run: |
        nix build .#darwinConfigurations.darwin-runner.config.system.build.toplevel
        sudo rm -rf /etc/nix/nix.conf
        result/activate-user && sudo result/activate
        # Wait for the SSH server to be ready.
        # kex_exchange_identification: read: Connection reset by peer
        until sudo ssh -o StrictHostKeyChecking=no builder@localhost -p 31022 -i /etc/nix/builder_ed25519 cat /proc/version; do sleep 10; done
    - name: Build gale.toplevel
      run: |
        nix build -L .#darwinConfigurations.gale.config.system.build.toplevel

  post-build-staging:
    name: "Push: staging -> master"
    if: github.ref == 'refs/heads/staging' || github.event_name == 'schedule'
    needs: [build-linux, build-darwin]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        ref: staging
    - name: Push to master if builds passed
      run: |
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git config --global user.name 'github-actions[bot]'
        git push origin staging:master

  post-build-master:
    name: "Push: master -> staging"
    if: github.ref == 'refs/heads/master'
    needs: [build-linux, build-darwin]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - name: Sync staging branch to master
      run: |
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git config --global user.name 'github-actions[bot]'
        if ! git push --force-with-lease origin master:staging 2>stderr; then
          echo "::warning::Push: master -> staging: $(grep 'error: ' stderr)"
        fi

  post-build-release:
    name: Make release
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
    needs: [build-linux, build-darwin]
    runs-on: ubuntu-latest
    steps:
    - name: Bump the release version
      run: |
        RESPONSE=$(curl -H 'authorization: Bearer ${{secrets.GITHUB_TOKEN}}' -s 'https://api.github.com/repos/${{github.repository}}/releases')
        PREV=$(echo $RESPONSE | jq -r 'map(.tag_name) | sort_by(split("r")[1] | tonumber) | last')
        echo "Latest release: $PREV"
        if [ "${{github.event_name}}" = 'push' ] && [ "${{github.ref_type}}" = 'tag' ]; then
          echo "Using tag as release version."
          NEXT="$(basename ${{github.ref}})"
        elif [ "$PREV" = "null" ]; then
          NEXT="r0"
        else
          NEXT="r$((${PREV#r} + 1))"
        fi
        echo "New release version: $NEXT"
        echo "next=$NEXT" >> "$GITHUB_ENV"
    - uses: actions/download-artifact@main
      with:
        merge-multiple: true
    - uses: softprops/action-gh-release@v2.1.0
      with:
        tag_name: ${{env.next}}
        files: '*.xz'
