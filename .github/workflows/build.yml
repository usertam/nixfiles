name: "Build Image"
on:
  workflow_dispatch:
  push:
    branches:
    - master
permissions:
  contents: write
jobs:
  build:
    strategy:
      matrix:
        name: [
          azure.x86_64-linux,
          azure.aarch64-linux,
          docker.x86_64-linux,
          docker.aarch64-linux
        ]
        include:
        - set: nixosConfigurations
          runs-on: ubuntu-latest
        - set: darwinConfigurations
          name: blizzard
          runs-on: macos-14
      fail-fast: false
    name: Build ${{matrix.name}}
    runs-on: ${{matrix.runs-on}}
    steps:
    - uses: actions/checkout@v4
    - name: Generate release version
      run: |
        PREV=$(curl -s "https://api.github.com/repos/${{github.repository}}/releases" | jq -r '.[0].tag_name')
        if [ "$PREV" = "null" ]; then PREV="r0"; fi
        echo "RELEASE=r$((${PREV#r} + 1))" >> "$GITHUB_ENV"
    - uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixpkgs-unstable.tar.gz
        extra_nix_config: extra-platforms = aarch64-darwin aarch64-linux x86_64-darwin x86_64-linux 
    - uses: cachix/cachix-action@v13
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Check if emulation support is needed
      if: matrix.runs-on == 'ubuntu-latest'
      run: |
        SYSTEM=$(nix eval --raw .#${{matrix.set}}.${{matrix.name}}.pkgs.system)
        if [ "$SYSTEM" = "x86_64-linux" ]; then
          echo "EMULATION=false" >> "$GITHUB_ENV"
        else
          echo "EMULATION=true" >> "$GITHUB_ENV"
        fi
    - name: Install emulation support for extra platforms
      if: env.EMULATION == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y binfmt-support qemu-user-static
    - name: Build ${{matrix.name}}.toplevel
      run: |
        nix build -L .#${{matrix.set}}.${{matrix.name}}.config.system.build.toplevel
    - name: Build ${{matrix.name}}.azureImage for release
      if: startsWith(matrix.name, 'azure.')
      run: |
        POSTFIX=$(nix eval --raw .#${{matrix.set}}.${{matrix.name}}.config.system.nixos.label)
        nix build -L .#${{matrix.set}}.${{matrix.name}}.config.system.build.azureImage
        export PATH=$(nix build --print-out-paths --no-link nixpkgs#pixz)/bin:$PATH
        pixz -k result/*.vhd "${{matrix.name}}.usertam.nixos-$POSTFIX.vhd.xz"
        echo "ARTIFACT=${{matrix.name}}.usertam.nixos-$POSTFIX.vhd.xz" >> "$GITHUB_ENV"
    - name: Build ${{matrix.name}}.tarball for release
      if: startsWith(matrix.name, 'docker.')
      run: |
        POSTFIX=$(nix eval --raw .#${{matrix.set}}.${{matrix.name}}.config.system.nixos.label)
        nix build -L .#${{matrix.set}}.${{matrix.name}}.config.system.build.tarball
        cp -a result/tarball/*.tar.xz "${{matrix.name}}.usertam.nixos-$POSTFIX.tar.xz"
        echo "ARTIFACT=${{matrix.name}}.usertam.nixos-$POSTFIX.tar.xz" >> "$GITHUB_ENV"
    - uses: actions/upload-artifact@v4
      if: env.ARTIFACT != ''
      with:
        name: ${{env.ARTIFACT}}
        path: ${{env.ARTIFACT}}
    - uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{env.RELEASE}}
        files: ${{env.ARTIFACT}}
