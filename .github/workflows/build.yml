name: "Build Image"
on:
  workflow_dispatch:
  push:
    branches:
    - master
    - dev
permissions:
  contents: write
jobs:
  version:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      prev: ${{steps.main.outputs.prev}}
      next: ${{steps.main.outputs.next}}
    steps:
    - name: Bump the release version
      id: main
      run: |
        RESPONSE=$(curl -H 'authorization: Bearer ${{secrets.GITHUB_TOKEN}}' -s 'https://api.github.com/repos/${{github.repository}}/releases')
        PREV=$(echo $RESPONSE | jq -r 'map(.tag_name) | sort_by(split("r")[1] | tonumber) | last')
        echo "Latest release: $PREV"
        echo "prev=$PREV" >> "$GITHUB_OUTPUT"

        if [ "$PREV" = "null" ]; then
          NEXT="r0"
        else
          NEXT="r$((${PREV#r} + 1))"
        fi
        echo "New release: $NEXT"
        echo "next=$NEXT" >> "$GITHUB_OUTPUT"

  build-linux:
    name: Build Linux
    needs: version
    strategy:
      matrix:
        config:
        - generic.installer.x86_64-linux
        - generic.installer.aarch64-linux
        - generic.azure.x86_64-linux
        - generic.azure.aarch64-linux
        - generic.docker.x86_64-linux
        - generic.docker.aarch64-linux
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: DeterminateSystems/nix-installer-action@main
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Show build information
      run: |
        echo "Build name: ${CONFIG:=${{matrix.config}}}"
        echo "Build config: ${ATTR:=nixosConfigurations.${CONFIG}}"
        echo "Build image label: ${LABEL:=$(nix eval --raw .#${ATTR}.config.system.nixos.label)}"
        echo "Build architecture: ${SYSTEM:=$(nix eval --raw .#${ATTR}.pkgs.system)}"
        echo "config=$CONFIG" >> "$GITHUB_ENV"
        echo "attr=$ATTR" >> "$GITHUB_ENV"
        echo "label=$LABEL" >> "$GITHUB_ENV"
        echo "system=$SYSTEM" >> "$GITHUB_ENV"
    - name: Install emulation support
      if: env.system != 'x86_64-linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y binfmt-support qemu-user-static
        echo 'extra-platforms = aarch64-linux' | sudo tee -a /etc/nix/nix.conf
        sudo systemctl restart nix-daemon
    - name: Build ${{env.config}}.toplevel
      run: |
        nix build -L .#${{env.attr}}.config.system.build.toplevel
    - name: Build ${{env.config}}.isoImage for release
      if: contains(env.config, 'installer')
      run: |
        nix build -L .#${{env.attr}}.config.system.build.isoImage
        IMAGE="nixos-image-${{env.label}}-${{env.system}}.iso"
        $(nix build --print-out-paths --no-link nixpkgs#pixz)/bin/pixz -k \
          "$(find -L result -name '*.iso')" "${IMAGE}.xz"
        echo "artifact=${IMAGE}.xz" >> "$GITHUB_ENV"
    - name: Build ${{env.config}}.azureImage for release
      if: contains(env.config, 'azure')
      run: |
        nix build -L .#${{env.attr}}.config.system.build.azureImage
        IMAGE="$(nix eval --raw .#${{env.attr}}.config.image.fileName)"
        $(nix build --print-out-paths --no-link nixpkgs#pixz)/bin/pixz -k \
          "result/$IMAGE" "${IMAGE}.xz"
        echo "artifact=${IMAGE}.xz" >> "$GITHUB_ENV"
    - name: Build ${{env.config}}.tarball for release
      if: contains(env.config, 'docker')
      run: |
        nix build -L .#${{env.attr}}.config.system.build.tarball
        TARBALL="nixos-tarball-${{env.label}}-${{env.system}}.tar.xz"
        cp -a "$(find -L result -name '*.tar.xz')" "$TARBALL"
        echo "artifact=$TARBALL" >> "$GITHUB_ENV"
    - uses: actions/upload-artifact@main
      if: env.artifact != ''
      with:
        name: ${{env.artifact}}
        path: ${{env.artifact}}
    - uses: softprops/action-gh-release@v2.1.0
      if: github.ref == 'refs/heads/master'
      with:
        tag_name: ${{needs.version.outputs.next}}
        files: ${{env.artifact}}

  build-darwin:
    name: Build Darwin
    needs: version
    runs-on: macos-15
    steps:
    - uses: actions/checkout@main
    - uses: DeterminateSystems/nix-installer-action@main
      with:
        mac-case-sensitive: true
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Switch to darwin-runner
      run: |
        nix build .#darwinConfigurations.darwin-runner.config.system.build.toplevel
        sudo rm -rf /etc/nix/nix.conf
        result/activate-user && sudo result/activate
        # Wait for the SSH server to be ready.
        # kex_exchange_identification: read: Connection reset by peer
        until sudo ssh -o StrictHostKeyChecking=no builder@localhost -p 31022 -i /etc/nix/builder_ed25519 cat /proc/version; do sleep 10; done
    - name: Build gale.toplevel
      run: |
        nix build -L .#darwinConfigurations.gale.config.system.build.toplevel
