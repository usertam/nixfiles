name: "Build tests on platforms"
on:
  workflow_dispatch:
  push:
  pull_request:
  schedule:
  - cron: '0 0 * * MON'
jobs:
  build-linux:
    name: Build Linux
    strategy:
      matrix:
        config: [generic.installer, generic.azure, generic.docker]
        system: [x86_64-linux, aarch64-linux]
      fail-fast: false
    runs-on: ${{matrix.system == 'x86_64-linux' && 'ubuntu-24.04' || 'ubuntu-24.04-arm'}} 
    steps:
    - uses: actions/checkout@main
      with:
        ref: ${{github.ref}}
    - uses: DeterminateSystems/nix-installer-action@main
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Build ${{matrix.system}}.${{matrix.config}}.toplevel
      run: |
        nix build -L .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.toplevel
    - name: Build ${{matrix.system}}.${{matrix.config}}.release
      if: contains(matrix.config, 'generic')
      run: |
        nix build -L .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.release
        find -L result -name '*.xz' -exec cp -a {} . \;
        echo "artifact=$(ls *.xz | tee /dev/stderr)" >> "$GITHUB_ENV"
    - name: Deterministic check on ${{matrix.system}}.${{matrix.config}}.toplevel
      if: github.event_name == 'schedule'
      run: |
        if ! nix build -L --rebuild --keep-failed .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.toplevel 2>&1 | tee stderr; then
          echo "::warning::$(grep 'error: ' stderr)"
          diff -ar $(nix eval --raw){,.check} || true
        fi
    - name: Deterministic check on ${{matrix.system}}.${{matrix.config}}.release
      if: github.event_name == 'schedule' && contains(matrix.config, 'generic')
      run: |
        if ! nix build -L --rebuild --keep-failed .#packages.${{matrix.system}}.nixosConfigurations.${{matrix.config}}.config.system.build.release 2>&1 | tee stderr; then
          echo "::warning::$(grep 'error: ' stderr)"
          diff -ar $(nix eval --raw){,.check} || true
        fi
    - uses: actions/upload-artifact@main
      if: env.artifact != ''
      with:
        name: ${{env.artifact}}
        path: ${{env.artifact}}

  build-darwin:
    name: Build Darwin
    runs-on: macos-15
    steps:
    - uses: actions/checkout@main
      with:
        ref: ${{github.ref}}
    - uses: DeterminateSystems/nix-installer-action@main
      with:
        mac-case-sensitive: true
    - uses: cachix/cachix-action@master
      with:
        name: usertam-nixfiles
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
    - name: Switch to darwin-runner
      run: |
        nix build .#darwinConfigurations.darwin-runner.config.system.build.toplevel
        sudo rm -rf /etc/nix/nix.conf
        result/activate-user && sudo result/activate
        # Wait for the SSH server to be ready.
        # kex_exchange_identification: read: Connection reset by peer
        until sudo ssh -o StrictHostKeyChecking=no builder@localhost -p 31022 -i /etc/nix/builder_ed25519 cat /proc/version; do sleep 10; done
    - name: Build gale.toplevel
      run: |
        nix build -L .#darwinConfigurations.gale.config.system.build.toplevel
    - name: Deterministic check on gale.toplevel
      if: github.event_name == 'schedule'
      run: |
        if ! nix build --rebuild --keep-failed .#darwinConfigurations.gale.config.system.build.toplevel 2>stderr; then
          echo "::warning::$(grep 'error: ' stderr)"
          diff -ar $(nix eval --raw){,.check} || true
        fi
